name: Docker Deploy to AWS

on:
  push:
    branches:
      - main  # or your default branch

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY_FRONTEND: reblogify-frontend
  ECR_REPOSITORY_BACKEND: reblogify-backend
  EB_APPLICATION_NAME: reblogify-final
  EB_ENVIRONMENT_NAME: Reblogify-final-env

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Frontend Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG -f Dockerfile.prod .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG

    - name: Build and Push Backend Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG -f Dockerfile.backend.prod .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG

    - name: Generate Dockerrun.aws.json
      run: |
        cat > Dockerrun.aws.json << EOF
        {
          "AWSEBDockerrunVersion": "3",
          "containerDefinitions": [
            {
              "name": "frontend",
              "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}",
              "essential": true,
              "memory": 512,
              "portMappings": [
                {
                  "hostPort": 80,
                  "containerPort": 80
                }
              ],
              "environment": [
                {
                  "name": "REACT_APP_BACKEND_URL",
                  "value": "http://backend:5000"
                }
              ]
            },
            {
              "name": "backend",
              "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}",
              "essential": true,
              "memory": 512,
              "portMappings": [
                {
                  "hostPort": 5000,
                  "containerPort": 5000
                }
              ],
              "environment": [
                {
                  "name": "REDIS_URL",
                  "value": "redis://redis:6379"
                },
                {
                  "name": "NODE_ENV",
                  "value": "production"
                }
              ]
            },
            {
              "name": "redis",
              "image": "redis:alpine",
              "essential": true,
              "memory": 256,
              "portMappings": [
                {
                  "hostPort": 6379,
                  "containerPort": 6379
                }
              ],
              "command": ["redis-server", "--appendonly", "yes"]
            }
          ]
        }
        EOF

    - name: Deploy to Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v21
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: ${{ env.EB_APPLICATION_NAME }}
        environment_name: ${{ env.EB_ENVIRONMENT_NAME }}
        version_label: ${{ github.sha }}
        region: ${{ env.AWS_REGION }}
        deployment_package: Dockerrun.aws.json
        wait_for_deployment: true 